"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition
AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'news',
    'accounts',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'sign',
    'protect',
    'appointments.apps.AppointmentsConfig',
    'django_apscheduler',
    'celery',
    'redis',
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
LANGUAGE_SESSION_KEY = 'session_language_appname'
LANGUAGE_COOKIE_NAME = 'cookie_language_appname'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'news.middlewares.TimezoneMiddleware', # add that middleware!
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

LANGUAGES = [('en-us', _('English')),
            ('ru', _('Русский')),
             ]

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru'
TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'
SITE_ID = 1
ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True



EMAIL_HOST = os.getenv('EMAIL_HOST')  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно
# EMAIL_USE_TLS = False
EMAIL_TIMEOUT = 60



ADMINS = [
    ('Skavik', 'skavik46111@gmail.com'),
    # список всех админов в формате ('имя', 'их почта')
]
ACCOUNT_EMAIL_VRIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTIFICATION_METHOD = 'email'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
SERVER_EMAIL = 'teststudymail@yandex.ru'  # это будет у нас вместо аргумента FROM в массовой рассылке
DEFAULT_FROM_EMAIL ='teststudymail@yandex.ru' # если вы используете Яндекс, то не забудьте добавить + ‘@yandex.ru’
# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = 'redis://default:CwVe5uHFwfVoXRaLPFg20FP1If43LKHj@redis-14213.c14.us-east-1-2.ec2.cloud.redislabs.com:14213/0'
CELERY_RESULT_BACKEND = 'redis://:CwVe5uHFwfVoXRaLPFg20FP1If43LKHj@redis-14213.c14.us-east-1-2.ec2.cloud.redislabs.com:14213/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE ='Europe/Moscow'
# CELERY_TASK_TIME = 30*60

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'style': '{',
#     'formatters': {
#         'consoleformat': {
#             'format': '{asctime} - {levelname} - {message}',
#             'style': '{',
#         },
#         'warningformat': {
#             'format': '{asctime} - {levelname} - {message} - {pathname}',
#             'style': '{',
#         },
#         'debugerrorsformat': {
#             'format': '{asctime} - {levelname} - {message} - {pathname} - {exc_info}',
#             'style': '{',
#         },
#         'infoformatfile': {
#             'format': '{asctime} - {levelname} - {module} - {message}',
#             'style': '{',
#         },
#         'errorsformatfile': {
#             'format': '{asctime} - {levelname} - {message} - {pathname} - {exc_info}',
#             'style': '{',
#         },
#         'securityformatfile': {
#             'format': '{asctime} - {levelname} - {module} - {message}',
#             'style': '{',
#         },
#         'mailformat': {
#             'format': '{asctime} - {levelname} - {message} - {pathname}',
#             'style': '{',
#         },
#     },
#     'filters': {
#          'require_debug_true': {
#              '()': 'django.utils.log.RequireDebugTrue',
#          },
#          'require_debug_false': {
#              '()': 'django.utils.log.RequireDebugFalse',
#          },
#      },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true'],
#             'formatter': 'consoleformat'
#         },
#         'console_warning': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true'],
#             'formatter': 'warningformat'
#         },
#         'console_errors': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true'],
#             'formatter': 'debugerrorsformat'
#         },
#         'file_info': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'logs\general.log',
#             'filters': ['require_debug_false'],
#             'formatter': 'infoformatfile'
#         },
#         'file_errors': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': 'logs\errors.log',
#             'formatter': 'errorsformatfile'
#         },
#         'file_security': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'logs\security.log',
#             'formatter': 'securityformatfile'
#         },
#         'mail_logs': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'filters': ['require_debug_false'],
#             'formatter': 'mailformat'
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'console_warning', 'console_errors', 'file_info'],
#             'level': 'DEBUG',
#             'propagate': 'True'
#         },
#         'django.request': {
#             'handlers': ['file_errors', 'mail_logs'],
#             'level': 'ERROR',
#             'propagate': 'True'
#         },
#         'django.server': {
#             'handlers': ['file_errors', 'mail_logs'],
#             'level': 'ERROR',
#             'propagate': 'True'
#         },
#         'django.template': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': 'True'
#         },
#         'django.db_backends': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': 'True'
#         },
#         'django.security': {
#             'handlers': ['file_security'],
#             'level': 'INFO',
#             'propagate': 'True'
#         },
#     },
# }
